@page "/"
@using System.ComponentModel.DataAnnotations
@using Microsoft.SemanticKernel
@using System.Diagnostics
@using System.Text.Json

@inject IDialogService DialogService
@inject IToastService ToastService
@inject ILogger<Home> logger
@inject Kernel Kernel

<FluentWizard @ref="@wizard"
              StepperPosition="@StepperPosition.Top"
              StepSequence="@WizardStepSequence.Linear"
              DisplayStepNumber="@(WizardStepStatus.Current | WizardStepStatus.Next)"
              Border="WizardBorder.None"
              StepTitleHiddenWhen="@GridItemHidden.XsAndDown"
              Height="100%"
              OnFinish="@OnFinishedAsync">
    <Steps>
        <FluentWizardStep Label="Get started" OnChange="@OnStepChange" Summary="Provide Case Details">
            <FluentEditForm Model="caseDetails" FormName="caseId" OnValidSubmit="OnValidSubmit">
                <FluentStack Orientation="Orientation.Vertical"
                             HorizontalAlignment="@HorizontalAlignment.Center"
                             VerticalGap="20">
                    <DataAnnotationsValidator />
                    <h2 style="margin-top:5%">Welcome to Collab Advisor</h2>
                    <h5>Provide the case number to begin:</h5>
                    <FluentTextField @bind-Value=caseDetails.CaseNumber Placeholder="Case Number"></FluentTextField>
                    <FluentValidationSummary style="color:darkred" />
                </FluentStack>
            </FluentEditForm>
        </FluentWizardStep>
        <FluentWizardStep Label="Provide Details"
                          Summary="Describe the Problem"
                          OnChange="@OnStepChange">
            <FluentEditForm Model="descriptionModel" FormName="caseId" OnValidSubmit="FetchSuggestions">
                <FluentStack Orientation="Orientation.Vertical"
                             HorizontalAlignment="@HorizontalAlignment.Center"
                             VerticalGap="20">
                    <DataAnnotationsValidator />
                    <h5 style="margin-top:5%">Describe the need for a collab:</h5>
                    <FluentTextArea @bind-Value=descriptionModel.AssistanceDetails Placeholder="Problem description" Cols="80"></FluentTextArea>
                    <FluentValidationSummary style="color:darkred" />
                </FluentStack>
            </FluentEditForm>
        </FluentWizardStep>
        <FluentWizardStep Label="Recommendations"
                          Summary="@suggestionStatus"
                          OnChange="@OnStepChange">
            @if (suggestions.Count > 0)
            {
                <Suggestions SuggestionList="@suggestions" Resolved="()=> { issueResolved = true; wizard.GoToStepAsync(3); }" />
            }
        </FluentWizardStep>
        <FluentWizardStep Label="Finish"
                          OnChange="@OnStepChange">
            <Finished IsResolved="issueResolved" />
        </FluentWizardStep>
    </Steps>
</FluentWizard>
<FluentOverlay @bind-Visible=@_overlayIsVisible
               Opacity="0.4"
               Alignment="Align.Center"
               Justification="@JustifyContent.Center">
    <FluentProgressRing />
</FluentOverlay>

@code
{
    CaseModel caseDetails = new();
    List<SuggestionModel> suggestions = new();
    DescriptionModel descriptionModel = new();
    FluentWizard wizard = default!;
    string suggestionStatus = "Review Insights";
    bool isTop;
    bool issueResolved;
    WizardStepSequence StepSequence = WizardStepSequence.Linear;
    private bool _overlayIsVisible = false;

    void OnStepChange(FluentWizardStepChangeEventArgs e)
    {

    }

    async Task OnFinishedAsync()
    {
        await DialogService.ShowInfoAsync("Wizard completed");
    }

    async Task OnValidSubmit()
    {
        _overlayIsVisible = true;
        await Task.Delay(2000);
        _overlayIsVisible = false;
    }

    async Task FetchSuggestions()
    {
        try
        {
            suggestionStatus = "Thinking..Please wait";
            _overlayIsVisible = true;
            var prompt = $"{Constants.GenerateSuggestionPrompt}{Environment.NewLine}{descriptionModel.AssistanceDetails}";
            var result = await Kernel.InvokePromptAsync(prompt);
            suggestions = JsonSerializer.Deserialize<List<SuggestionModel>>(result.ToString()) ?? [];
            suggestionStatus = "Try solutions";
            _overlayIsVisible = false;
        }
        catch (Exception ex)
        {
            Debug.WriteLine(ex);
            ToastService.ShowWarning(ex.Message);
            _overlayIsVisible = false;
        }
    }
}
